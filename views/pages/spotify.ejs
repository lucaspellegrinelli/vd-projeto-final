<%- contentFor("body") %>

<span class="title is-size-3 is-block">Métricas musicais do Spotify</span>

<div class="content">TODO: parágrafo introdutório</div>

<strong>Comparar com:</strong><br>

<label class="checkbox">
  <input id="kpop-artists-checkbox" type="checkbox">
  Outros artistas de K-pop
</label>
&nbsp;
<label class="checkbox">
  <input id="general-artists-checkbox" type="checkbox">
  Artistas em geral
</label>

<div id="chart-container"></div>

<div class="content">
<ul>
  <li>
    <strong>acousticness</strong> é uma métrica que mede o quanto uma música é
    "acústica". Músicas que fazem uso de violão e outros instrumentos acústicos
    terão valores mais próximos de 1.
  </li>
  <li>
    <strong>danceability</strong> mede o quanto uma música é "boa para
    dançar", baseando-se em uma série de métricas. Em geral, uma música com um
    tempo acelerado, ritmo estável, e uma batida forte e regular, terá valores
    de <i>danceability</i> mais altos.
  </li>
  <li>
    A métrica <strong>energy</strong> mede a intensidade e atividade de uma
    música. Músicas energéticas são aceleradas e barulhentas, enquanto músicas
    mais calmas e lentas têm valores de <i>energy</i> mais próximos de 0.
  </li>
  <li>
    <strong>liveness</strong> estima o quão provável é que uma música seja uma
    gravação de uma apresentação ao vivo. Valores próximos de 1 indicam que a
    música foi provavelmente gravada ao vivo, enquanto valores próximos de 0
    indicam uma gravação em estúdio.
  </li>
  <li>
    A métrica <strong>speechiness</strong> mede o quanto da gravação é composta
    por apenas palavras. Valores mais altos indicam podcasts, gravações de
    poesia, ou músicas de rap, enquanto valores moderados e baixos indicam
    músicas que também possuem partes instrumentais substanciais. Em geral, a
    maioria dos gêneros musicais apresenta valores mais baixos.
  </li>
  <li>
    Finalmente, <strong>valence</strong> é uma métrica que estima a
    "positividade" da música. Músicas que são perceptivamente mais "felizes"
    terão valores mais altos que músicas "tristes" e "negativas".
  </li>
</ul>

Referência:
https://developer.spotify.com/documentation/web-api/reference/#object-audiofeaturesobject

<script>
  const readJsonFile = (path) => {
    const contents = $.ajax({type: "GET", url: path, async: false}).responseText;
    return JSON.parse(contents);
  };

  const datasets = [
    "/json/kpop-artist-features.json",
    "/json/general-artist-features.json",
    "/json/all-artist-features.json",
  ];
  let currentDataset = 0;
  let selectedArtist = 0;

  const artistColor = (artistIndex) =>
    artistIndex == 0 ? PINK
      : (currentDataset == 1 || artistIndex > 10) ? GREEN
      : BLUE;

  const getChartData = (rawData, artistIndex) => {
    return {
      labels: rawData.labels,
      datasets: [
        {
          data: rawData.meanFeatures,
          backgroundColor: "rgba(0,0,0,0)",
          borderColor: "black",
          borderWidth: { right: 3 },
          barPercentage: 1.0,
          grouped: false,
          label: "average",
        },
        {
          data: rawData.artists[artistIndex].features,
          backgroundColor: artistColor(artistIndex),
          barPercentage: 0.6,
          label: rawData.artists[artistIndex].name,
        },
      ],
    }
  };

  const drawMainChart = (rawData, context, artistIndex) => {
    const data = getChartData(rawData, artistIndex);
    const options = {
      indexAxis: "y",
      scales: {
        x: { min: 0, max: 1 },
      },
      plugins: {
        title: {
          display: true,
          text: rawData.artists[artistIndex].name,
          font: { size: 16 },
        },
        legend: { display: false }
      }
    };
    return new Chart(context, { type: "bar", data, options });
  };

  const drawSmallChart = (rawData, context, artistIndex) => {
    const data = getChartData(rawData, artistIndex);
    const options = {
        aspectRatio: 1.25,
        indexAxis: "y",
        scales: {
          x: { min: 0, max: 1, display: false },
          y: { display: false },
        },
        plugins: {
          title: {
            display: true,
            padding: 0,
            text: rawData.artists[artistIndex].name,
            font: { size: 12 }
          },
          legend: { display: false }
        }
    };
    return new Chart(context, { type: "bar", data, options });
  };

  const loadCharts = (dataPath) => {
    const rawData = readJsonFile(dataPath);

    let container = document.getElementById("chart-container");
    container.innerHTML = "";

    // Adding main chart
    let canvas = document.createElement("canvas");
    canvas.height = 110;
    canvas.className = "mb-6 main-chart";
    container.appendChild(canvas);
    const mainChart = drawMainChart(rawData, canvas.getContext("2d"), selectedArtist);

    // Adding small charts
    const ROW_SIZE = 5;
    const numberRows = Math.ceil(rawData.artists.length / ROW_SIZE);
    const allRows = [];
    for (let i = 0; i < numberRows; i++) {
      const row = document.createElement("div");
      row.className = "columns is-flex is-justify-content-center";
      container.appendChild(row);
      allRows.push(row);
    }
    for (let i = 1; i < rawData.artists.length; i++) {
      const rowIndex = Math.floor((i - 1) / ROW_SIZE);

      const canvasHolder = document.createElement("div");
      canvasHolder.className = "column is-2 p-1 mb-3";
      let canvas = document.createElement("canvas");
      canvas.setAttribute("style", "border:1px solid gray;");
      canvas.className = "mt-1 py-1";
      canvas.onclick = () => {
        selectedArtist = i == selectedArtist ? 0 : i;
        loadCharts(datasets[currentDataset]);
      };
      canvasHolder.appendChild(canvas);

      drawSmallChart(rawData, canvas.getContext("2d"), i == selectedArtist ? 0 : i);

      allRows[rowIndex].appendChild(canvasHolder);
    }
  };
  loadCharts("/json/kpop-artist-features.json");

  const kpopCheckbox = document.getElementById("kpop-artists-checkbox");
  const generalCheckbox = document.getElementById("general-artists-checkbox");

  kpopCheckbox.checked = true;
  generalCheckbox.checked = false;

  const checkboxUpdate = () => {
    currentDataset = +kpopCheckbox.checked + 2 * (+generalCheckbox.checked) - 1
    selectedArtist = 0;
    loadCharts(datasets[currentDataset]);
  };
  kpopCheckbox.onchange = () => {
    if (!kpopCheckbox.checked && !generalCheckbox.checked) {
      generalCheckbox.checked = true;
    }
    checkboxUpdate();
  };
  generalCheckbox.onchange = () => {
    if (!kpopCheckbox.checked && !generalCheckbox.checked) {
      kpopCheckbox.checked = true;
    }
    checkboxUpdate();
  };

</script>
